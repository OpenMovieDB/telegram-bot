import { Logger, UseFilters, UseInterceptors } from '@nestjs/common';
import { Action, Command, Ctx, Hears, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { BotService } from './bot.service';
import { BOT_NAME } from './constants/bot-name.const';
import { ResponseTimeInterceptor } from './interceptors/response-time-interceptor.service';
import { AllExceptionFilter } from './filters/all-exception.filter';
import { Context } from './interfaces/context.interface';
import { SceneContext } from 'telegraf/typings/scenes';
import { CommandEnum } from './enum/command.enum';
import { UserService } from './user/user.service';
import { BUTTONS } from './constants/buttons.const';
import { ConfigService } from '@nestjs/config';
import { PaymentService } from './payment/payment.service';
import { TariffService } from './tariff/tariff.service';
import { PaymentSystemEnum } from './payment/enum/payment-system.enum';
import { DateTime } from 'luxon';
import { PaymentStatusEnum } from './payment/enum/payment-status.enum';
import { SafeTelegramHelper } from './helpers/safe-telegram.helper';
import { ModerationService } from './moderation/moderation.service';
import { createUnbanConfirmationKeyboard } from './moderation/keyboards/moderation.keyboards';

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(AllExceptionFilter)
export class BotUpdate {
  private readonly adminChatId: number;

  private readonly logger = new Logger(BotUpdate.name);
  constructor(
    @InjectBot(BOT_NAME)
    private readonly bot: Telegraf<Context>,
    private readonly botService: BotService,
    private readonly userService: UserService,
    private readonly tariffService: TariffService,
    private readonly configService: ConfigService,
    private readonly paymentService: PaymentService,
    private readonly moderationService: ModerationService,
  ) {
    this.adminChatId = Number(configService.get('ADMIN_CHAT_ID'));
  }

  @Start()
  async onStart(@Ctx() ctx: Context & { update: any }) {
    const message = ctx.update.message;
    if (!['private'].includes(message.chat.type)) {
      await SafeTelegramHelper.safeSend(
        () =>
          ctx.reply('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
            reply_markup: {
              remove_keyboard: true,
            },
          }),
        `Group chat instruction to ${ctx.chat.id}`,
      );
      return;
    }

    ctx.session.messageId = undefined;

    await ctx.scene.enter(CommandEnum.START);
  }

  @Command('pay')
  async onPayCommand(@Ctx() ctx: Context & { update: any }) {
    if (this.isAdmin(ctx)) {
      const [token, tariffName, monthCount, startAt] = ctx.state.command.args;
      if (!(token && tariffName)) throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!');
      const paymentMonths = monthCount || 1;
      const paymentAt = startAt ? DateTime.fromFormat(startAt, 'dd.MM.yyyy').toJSDate() : undefined;

      const user = await this.userService.findUserByToken(token.toUpperCase());
      const tariff = await this.tariffService.getOneByName(tariffName.toUpperCase());
      const payment = await this.paymentService.createPayment(
        user.userId,
        user.chatId,
        tariff._id.toString(),
        PaymentSystemEnum.CASH,
        paymentMonths,
        '',
        paymentAt,
      );

      await SafeTelegramHelper.safeSend(
        () => this.bot.telegram.sendMessage(this.adminChatId, `–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Å id: ${payment.paymentId}`),
        'Admin notification: payment created',
      );
    }
  }

  @Command('confirm')
  async onConfirmCommand(@Ctx() ctx: Context & { update: any }) {
    if (this.isAdmin(ctx)) {
      const [paymentId] = ctx.state.command.args;
      if (!paymentId) throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!');

      // First mark payment as PAID without final flag to allow validation
      await this.paymentService.updatePaymentStatus(paymentId, PaymentStatusEnum.PAID, false);

      // Trigger validation to process the payment and update user
      const isPaid = await this.paymentService.validatePayment(paymentId);

      if (isPaid) {
        await SafeTelegramHelper.safeSend(
          () => this.bot.telegram.sendMessage(this.adminChatId, `‚úÖ –û–ø–ª–∞—Ç–∞ ${paymentId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`),
          'Admin notification: payment confirmed',
        );

        // Send notification to user
        const payment = await this.paymentService.findPaymentByPaymentId(paymentId);
        if (payment) {
          const tariff = await this.tariffService.getOneById(payment.tariffId);
          await SafeTelegramHelper.safeSend(
            () =>
              this.bot.telegram.sendMessage(
                payment.chatId,
                `‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
                  `–¢–∞—Ä–∏—Ñ: ${tariff.name}\n` +
                  `–ü–µ—Ä–∏–æ–¥: ${payment.monthCount} –º–µ—Å.\n\n` +
                  `–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!`,
              ),
            `User payment confirmation to ${payment.chatId}`,
          );
        }
      } else {
        await SafeTelegramHelper.safeSend(
          () => this.bot.telegram.sendMessage(this.adminChatId, `‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ ${paymentId} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`),
          'Admin notification: payment error',
        );
      }
    }
  }

  @Command('comfirm')
  async onComfirmCommand(@Ctx() ctx: Context & { update: any }) {
    // Redirect to correct command
    return this.onConfirmCommand(ctx);
  }

  @Command('retry')
  async onRetryCommand(@Ctx() ctx: Context & { update: any }) {
    if (this.isAdmin(ctx)) {
      const [paymentId] = ctx.state.command.args;
      if (!paymentId) {
        await SafeTelegramHelper.safeSend(
          () =>
            this.bot.telegram.sendMessage(
              this.adminChatId,
              '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–ª–∞—Ç–µ–∂–∞!\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /retry <paymentId>',
            ),
          'Admin retry command error',
        );
        return;
      }

      try {
        // Find the payment
        const payment = await this.paymentService.findPaymentByPaymentId(paymentId);
        if (!payment) {
          await SafeTelegramHelper.safeSend(
            () => this.bot.telegram.sendMessage(this.adminChatId, `‚ùå –ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`),
            'Admin retry: payment not found',
          );
          return;
        }

        // Reset payment status to PENDING and clear final flag
        await this.paymentService.updatePaymentStatus(paymentId, PaymentStatusEnum.PENDING, false);

        await SafeTelegramHelper.safeSend(
          () =>
            this.bot.telegram.sendMessage(
              this.adminChatId,
              `üîÑ –ü–ª–∞—Ç–µ–∂ ${paymentId} —Å–±—Ä–æ—à–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å PENDING\n` +
                `üí≥ –°–∏—Å—Ç–µ–º–∞: ${payment.paymentSystem}\n` +
                `üí∞ –°—É–º–º–∞: ${payment.amount} ‚ÇΩ\n` +
                `üë§ User ID: ${payment.userId}\n\n` +
                `‚è± –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥`,
            ),
          'Admin retry command success',
        );

        // Try to validate immediately
        this.logger.debug(`Manually retrying payment ${paymentId}`);
        const isPaid = await this.paymentService.validatePayment(paymentId);

        if (isPaid) {
          const user = await this.userService.findOneByUserId(payment.userId);

          await SafeTelegramHelper.safeSend(
            () =>
              this.bot.telegram.sendMessage(
                this.adminChatId,
                `‚úÖ –ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!`,
              ),
            'Admin retry: payment success',
          );

          // Send success messages to user asynchronously (command execution should not depend on message delivery)
          this.botService
            .sendPaymentSuccessMessage(payment.chatId, user.tariffId.name, user.subscriptionEndDate)
            .catch((error) => {
              this.logger.error(`Failed to send payment success message: ${error.message}`);
            });

          this.botService
            .sendPaymentSuccessMessageToAdmin(
              user.username,
              user.tariffId.name,
              payment.monthCount,
              payment.amount,
              payment.paymentSystem,
              payment.discount,
              payment.originalPrice,
            )
            .catch((error) => {
              this.logger.error(`Failed to send admin notification: ${error.message}`);
            });
        } else {
          await SafeTelegramHelper.safeSend(
            () =>
              this.bot.telegram.sendMessage(
                this.adminChatId,
                `‚è≥ –ü–ª–∞—Ç–µ–∂ ${paymentId} –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
              ),
            'Admin retry: payment still pending',
          );
        }
      } catch (error) {
        this.logger.error(`Error in retry command: ${error.message}`, error.stack);
        await SafeTelegramHelper.safeSend(
          () =>
            this.bot.telegram.sendMessage(
              this.adminChatId,
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}:\n${error.message}`,
            ),
          'Admin retry command error',
        );
      }
    }
  }

  @Action(/.*/)
  async onAnswer(@Ctx() ctx: SceneContext & { update: any }) {
    this.logger.log(ctx);
    try {
      const cbQuery = ctx.update.callback_query;
      if (!['private'].includes(cbQuery.message.chat.type)) return;
      const nextStep = 'data' in cbQuery ? cbQuery.data : null;
      await ctx.scene.enter(nextStep);
    } catch (e) {
      this.logger.log(e);
    }
  }

  @Hears(BUTTONS[CommandEnum.HOME].text)
  async onMenuHears(@Ctx() ctx: Context & { update: any }) {
    const message = ctx.update.message;

    if (!['private'].includes(message.chat.type)) return;

    try {
      this.logger.log('hears', ctx.message);
      // Clear messageId when navigating via text commands
      ctx.session.messageId = undefined;
      const existUser = await this.userService.findOneByUserId(ctx.from.id);
      if (existUser) {
        ctx.scene.enter(CommandEnum.HOME);
      } else {
        ctx.scene.enter(CommandEnum.START);
      }
    } catch (e) {
      this.logger.log(e);
    }
  }

  @Hears(/.*/)
  async onHears(@Ctx() ctx: Context & { update: any }) {
    const user = await this.userService.findOneByUserId(ctx.from.id);
    if (user && !user.chatId) await this.userService.update(user.userId, { chatId: ctx.chat.id });
    try {
      const message = ctx.update.message;
      const [command] = Object.entries(BUTTONS).find(([_, button]) => button.text === message.text);

      if (!['private'].includes(message.chat.type)) return;

      this.logger.log('stats', ctx.message);
      // Clear messageId when navigating via text commands
      ctx.session.messageId = undefined;
      ctx.scene.enter(command);
    } catch (e) {
      this.logger.log(e);
    }
  }

  @On('new_chat_members')
  async onNewChatMembers(@Ctx() ctx: Context & { update: any }) {
    await this.botService.createInvitedUser(ctx);
  }

  @On('left_chat_member')
  async onLeftChatMember(@Ctx() ctx: Context & { update: any }) {
    this.logger.log('left_chat_member', ctx);
    this.botService.leftTheChat(ctx);
  }

  @On('text')
  async onGroupText(@Ctx() ctx: Context & { update: any }) {
    const message = ctx.update.message;
    const targetChatId = Number(this.configService.get('CHAT_ID'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
    if (message.chat.id !== targetChatId) {
      return;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º private —á–∞—Ç—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (message.chat.type === 'private') {
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await this.moderationService.checkAndModerateUser(ctx);
  }

  @On('message')
  async onGroupMessage(@Ctx() ctx: Context & { update: any }) {
    const message = ctx.update.message;
    const targetChatId = Number(this.configService.get('CHAT_ID'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
    if (message.chat.id !== targetChatId) {
      return;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º private —á–∞—Ç—ã –∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.chat.type === 'private' || message.text) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
    await this.moderationService.checkAndModerateUser(ctx);
  }

  @Action(/^unban_(\d+)$/)
  async onUnbanUser(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    if (!this.isAdmin(ctx)) {
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'),
        'Unauthorized unban attempt',
      );
      return;
    }

    try {
      const userId = parseInt(ctx.match[1]);
      const callbackQuery = ctx.update.callback_query;
      const originalMessage = 'message' in callbackQuery && 'text' in callbackQuery.message ? callbackQuery.message.text : '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const usernameMatch = originalMessage.match(/Username: @([^\n]+)/);
      const username = usernameMatch ? usernameMatch[1] : 'Unknown';

      const user = await this.moderationService.unbanUser(userId, username);

      if (user) {
        await SafeTelegramHelper.safeSend(
          () => ctx.editMessageText(
            `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (@${username}) —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n` +
            `üÜî User ID: ${user.userId}\n` +
            `üè∑ –¢–æ–∫–µ–Ω: ${user.token?.slice(0, 8)}...\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ.`,
            createUnbanConfirmationKeyboard(userId)
          ),
          `Edit message after unban user ${userId}`,
        );

        await SafeTelegramHelper.safeSend(
          () => ctx.answerCbQuery('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!'),
          'Unban success callback',
        );

        this.logger.log(`Admin unbanned user ${userId} (@${username})`);
      } else {
        await SafeTelegramHelper.safeSend(
          () => ctx.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (@${username})\n\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`
          ),
          `Edit message after unban error ${userId}`,
        );

        await SafeTelegramHelper.safeSend(
          () => ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
          'Unban error callback',
        );
      }
    } catch (error) {
      this.logger.error('Error in onUnbanUser:', error);
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'),
        'Unban exception callback',
      );
    }
  }

  @Action(/^ignore_(\d+)$/)
  async onIgnoreUser(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    if (!this.isAdmin(ctx)) {
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'),
        'Unauthorized ignore attempt',
      );
      return;
    }

    try {
      const userId = parseInt(ctx.match[1]);
      
      await SafeTelegramHelper.safeSend(
        () => ctx.editMessageText(
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–∞–Ω–µ\n\n` +
          `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º.`
        ),
        `Edit message after ignore user ${userId}`,
      );

      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–∞–Ω–µ'),
        'Ignore user callback',
      );

      this.logger.log(`Admin ignored unban request for user ${userId}`);
    } catch (error) {
      this.logger.error('Error in onIgnoreUser:', error);
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'),
        'Ignore exception callback',
      );
    }
  }

  @Action(/^clear_cache_(\d+)$/)
  async onClearUserCache(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    if (!this.isAdmin(ctx)) {
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'),
        'Unauthorized cache clear attempt',
      );
      return;
    }

    try {
      const userId = parseInt(ctx.match[1]);
      await this.moderationService.clearUserCache(userId);
      
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('‚úÖ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω'),
        'Cache clear callback',
      );

      this.logger.log(`Admin cleared cache for user ${userId}`);
    } catch (error) {
      this.logger.error('Error in onClearUserCache:', error);
      await SafeTelegramHelper.safeSend(
        () => ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞'),
        'Cache clear error callback',
      );
    }
  }

  private isAdmin(ctx: Context): boolean {
    return ctx.chat.id === this.adminChatId;
  }
}
