import { Action, Ctx, Hears, Scene, SceneEnter } from 'nestjs-telegraf';

import { AbstractScene } from '../abstract/abstract.scene';
import { CommandEnum } from '../enum/command.enum';
import { PaymentService } from '../payment/payment.service';
import { PaymentSystemEnum } from 'src/payment/enum/payment-system.enum';
import { Context } from 'src/interfaces/context.interface';
import { Markup } from 'telegraf';
import { replyOrEdit } from 'src/utils/reply-or-edit.util';
import { SCENES } from 'src/constants/scenes.const';

@Scene(CommandEnum.PAYMENT)
export class PaymentScene extends AbstractScene {
  constructor(private readonly paymentService: PaymentService) {
    super();
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Context) {
    this.logger.log(ctx.scene.session.current);
    const scene = SCENES[ctx.scene.session.current];

    await replyOrEdit(ctx, scene.text, Markup.inlineKeyboard(scene.buttons));
  }

  @Action(CommandEnum.PAY_WITH_CRYPTOMUS)
  async payWithCriptomus(@Ctx() ctx: Context) {
    await this.createPaymentAndReply(ctx, PaymentSystemEnum.CYPTOMUS);
  }

  @Action(CommandEnum.PAY_WITH_YOOKASSA)
  async payWithYookassa(@Ctx() ctx: Context) {
    // await this.createPaymentAndReply(ctx, PaymentSystemEnum.YOOKASSA);
    await replyOrEdit(
      ctx,
      '–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —á–µ–∫, –º–Ω–µ –Ω—É–∂–µ—Ç –≤–∞—à email! –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ!',
      Markup.inlineKeyboard([]),
    );
  }

  @Hears(/.+@.+\..+/)
  async email(@Ctx() ctx: Context) {
    const email = ctx.message?.['text'];
    this.logger.debug(`user email ${email}`);
    await this.createPaymentAndReply(ctx, PaymentSystemEnum.YOOKASSA, email);
  }

  private async createPaymentAndReply(ctx: Context, paymentSystem: PaymentSystemEnum, email?: string) {
    this.logger.debug(`create payment with ${paymentSystem}`);
    try {
      const { paymentMonths, tariffId } = ctx.session;

      this.logger.debug(`paymentMonths ${paymentMonths}, tariffId ${tariffId}, email ${email}`);

      const payment = await this.paymentService.createPayment(
        ctx.from.id,
        ctx.chat.id,
        tariffId,
        paymentSystem,
        paymentMonths,
        email,
      );
      this.logger.debug(`payment ${JSON.stringify(payment)}`);
      const sentMessage = await replyOrEdit(
        ctx,
        `–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ, —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–º –ø–æ–º–µ–Ω—è—é —Ç–∞—Ä–∏—Ñ.`,
        Markup.inlineKeyboard([[Markup.button.url('üëâ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', payment.url)]]),
      );
      this.logger.debug(`sentMessage ${JSON.stringify(sentMessage)}`);

      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
      setTimeout(async () => {
        const chatId = ctx.chat.id;
        const messageId = sentMessage.message_id;

        await ctx.telegram.editMessageText(
          chatId,
          messageId,
          undefined,
          `–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`,
          { parse_mode: 'HTML' },
        );
      }, 600000);
    } catch (error) {
      console.log(error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }
}
