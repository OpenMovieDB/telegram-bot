import { Action, Ctx, Hears, Scene, SceneEnter, SceneLeave } from 'nestjs-telegraf';

import { AbstractScene } from '../abstract/abstract.scene';
import { CommandEnum } from '../enum/command.enum';
import { PaymentService } from '../payment/payment.service';
import { PaymentSystemEnum } from 'src/payment/enum/payment-system.enum';
import { Context } from 'src/interfaces/context.interface';
import { Markup } from 'telegraf';
import { replyOrEdit } from 'src/utils/reply-or-edit.util';
import { SCENES } from 'src/constants/scenes.const';
import { DateTime } from 'luxon';
import { UserService } from 'src/user/user.service';
import { TariffService } from 'src/tariff/tariff.service';

@Scene(CommandEnum.PAYMENT)
export class PaymentScene extends AbstractScene {
  constructor(
    private readonly paymentService: PaymentService,
    private readonly userService: UserService,
    private readonly tariffService: TariffService,
  ) {
    super();
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Context) {
    this.logger.log(ctx.scene.session.current);
    const scene = SCENES[ctx.scene.session.current];

    // Reset payment flags when entering the scene
    ctx.session.paymentInProgress = false;
    ctx.session.waitingForEmail = false;

    await replyOrEdit(ctx, scene.text, Markup.inlineKeyboard(scene.buttons));
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: Context) {
    this.logger.log(`Leaving payment scene`);
    // Clear payment flags when leaving the scene
    if (ctx.session) {
      ctx.session.paymentInProgress = false;
      ctx.session.waitingForEmail = false;
    }
  }

  @Action(CommandEnum.PAY_WITH_CRYPTOMUS)
  async payWithCriptomus(@Ctx() ctx: Context) {
    ctx.session.waitingForEmail = false;
    ctx.session.paymentInProgress = true;
    await this.createPaymentAndReply(ctx, PaymentSystemEnum.CYPTOMUS);
  }

  @Action(CommandEnum.PAY_WITH_TBANK)
  async payWithTBank(@Ctx() ctx: Context) {
    ctx.session.waitingForEmail = true;
    ctx.session.paymentInProgress = false;
    await replyOrEdit(
      ctx,
      '–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —á–µ–∫, –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à email! –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ!',
      Markup.inlineKeyboard([]),
    );
  }

  @Hears(/[\w-]+@[\w-]+\.\w+/)
  async email(@Ctx() ctx: Context) {
    const email = ctx.message?.['text'];
    this.logger.debug(`user email ${email}`);

    // Check if we're waiting for email
    if (!ctx.session.waitingForEmail) {
      await ctx.reply('–ü–ª–∞—Ç–µ–∂ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
      return;
    }

    ctx.session.waitingForEmail = false;
    return await this.createPaymentAndReply(ctx, PaymentSystemEnum.TBANK, email);
  }

  // Handle navigation commands (like "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞", etc.)
  @Hears(['üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üîÑÔ∏è —Ç–∞—Ä–∏—Ñ', 'ü´£ —Ç–æ–∫–µ–Ω', '‚¨Ö –Ω–∞–∑–∞–¥'])
  async handleNavigationCommand(@Ctx() ctx: Context) {
    this.logger.debug('Navigation command received in payment scene, leaving scene');
    
    // Clear payment flags before navigation
    ctx.session.paymentInProgress = false;
    ctx.session.waitingForEmail = false;
    
    // Simply leave the scene - the main bot handler will process the command
    await ctx.scene.leave();
  }

  @Hears(/^(?!.*[\w-]+@[\w-]+\.\w+).*$/)
  async notAnEmail(@Ctx() ctx: Context) {
    // Check if we're waiting for email
    if (!ctx.session.waitingForEmail) {
      // If payment is already in progress, don't interrupt
      if (ctx.session.paymentInProgress) {
        await ctx.reply(
          '–ü–ª–∞—Ç–µ–∂ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.',
        );
        return;
      }
      // Otherwise, just ignore the message
      return;
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞.');
  }

  private async createPaymentAndReply(ctx: Context, paymentSystem: PaymentSystemEnum, email?: string) {
    this.logger.debug(`create payment with ${paymentSystem}`);
    try {
      const { paymentMonths, tariffId } = ctx.session;

      this.logger.debug(`paymentMonths ${paymentMonths}, tariffId ${tariffId}, email ${email}`);

      const payment = await this.paymentService.createPayment(
        ctx.from.id,
        ctx.chat.id,
        tariffId,
        paymentSystem,
        paymentMonths,
        email,
      );
      this.logger.debug(`payment ${JSON.stringify(payment)}`);
      // Set payment in progress flag
      ctx.session.paymentInProgress = true;

      let message = `–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n`;

      if (payment.discount && payment.discount > 0) {
        const user = await this.userService.findOneByUserId(ctx.from.id);
        const currentTariff = user.tariffId; // Already populated as Tariff object
        const newTariff = await this.tariffService.getOneById(tariffId);
        const daysRemaining = Math.floor(
          DateTime.fromJSDate(user.subscriptionEndDate).diff(DateTime.now(), 'days').days,
        );

        message += `üí∞ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –∑–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n`;
        message += `‚îú –ü–µ—Ä–µ—Ö–æ–¥ —Å —Ç–∞—Ä–∏—Ñ–∞: ${currentTariff.name} ‚Üí ${newTariff.name}\n`;
        message += `‚îú –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysRemaining}\n`;
        message += `‚îú –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${payment.originalPrice} ‚ÇΩ\n`;
        message += `‚îú –°–∫–∏–¥–∫–∞: -${payment.discount} ‚ÇΩ\n`;
        message += `‚îî <b>–ö –æ–ø–ª–∞—Ç–µ: ${payment.amount} ‚ÇΩ</b>\n\n`;
      } else {
        message += `üí∞ –ö –æ–ø–ª–∞—Ç–µ: ${payment.amount} ‚ÇΩ\n\n`;
      }

      message += `–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ, —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–º –ø–æ–º–µ–Ω—è—é —Ç–∞—Ä–∏—Ñ.\n\n‚è± –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 20 –º–∏–Ω—É—Ç.`;

      const sentMessage = await ctx.sendMessage(message, {
        ...Markup.inlineKeyboard([
          [Markup.button.url(paymentSystem === 'WALLET' ? 'üëõ Pay via Wallet' : 'üëâ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', payment.url)],
        ]),
        parse_mode: 'HTML',
      });
      this.logger.debug(`sentMessage ${JSON.stringify(sentMessage)}`);

      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
      setTimeout(async () => {
        const chatId = ctx.chat.id;
        const messageId = sentMessage.message_id;

        try {
          await ctx.telegram.editMessageText(
            chatId,
            messageId,
            undefined,
            `–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`,
            { parse_mode: 'HTML' },
          );

          // Reset payment flags for this user
          if (ctx.session) {
            ctx.session.paymentInProgress = false;
            ctx.session.waitingForEmail = false;
          }
        } catch (error) {
          this.logger.error(`Failed to edit expired payment message: ${error.message}`);
        }
      }, 1200000);
    } catch (error) {
      console.log(error);

      // Check if it's a downgrade attempt error
      if (error.message && error.message.startsWith('DOWNGRADE_NOT_ALLOWED:')) {
        const errorMessage = error.message.replace('DOWNGRADE_NOT_ALLOWED:', '');
        await ctx.reply(`‚ö†Ô∏è <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å —Ç–∞—Ä–∏—Ñ</b>\n\n${errorMessage}`, { parse_mode: 'HTML' });
        await ctx.scene.enter(CommandEnum.HOME);
      } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }
}
